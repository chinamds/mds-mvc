// Created using LayerGen 3.5

package com.mds.wf.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.mds.common.model.DataEntity;
import com.mds.core.WorkflowType;
import com.mds.sys.model.Role;
import com.mds.util.StringUtils;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Comparator;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="wf_workflow", uniqueConstraints = @UniqueConstraint(columnNames={"workflow_type_id", "workflow_name"}) )
@Indexed
@XmlRootElement
public class Workflow extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -4401019015729441862L;
	private OrganizationWorkflowType workflowType;
    private String workflowName;
    
    private List<WorkflowDetail> workflowDetails = Lists.newArrayList();	// workflow Details
        
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="workflow")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    public List<WorkflowDetail> getWorkflowDetails() {
		return workflowDetails;
	}

	public void setWorkflowDetails(List<WorkflowDetail> workflowDetails) {
		this.workflowDetails = workflowDetails;
	}
	
	@Transient
	public WorkflowDetail getApplyStep() {
		if (!workflowDetails.isEmpty()) {
			return workflowDetails.stream().filter(w->w.isApply()).findFirst().orElse(null);			
		}
		
		return null;
	}
	
	@Transient
	public WorkflowDetail getNextStep(WorkflowDetail workflowDetail) {
		if (!workflowDetails.isEmpty()) {
			return workflowDetails.stream().filter(w->w.getSeq() == workflowDetail.getSeq() + 1).findFirst().orElse(null);
		}
		
		return null;
	}
	
	@Transient
	public String getFlowchartScript() {
		String flowchartScript = "";
		String flowchartSeq = "";
		if (!workflowDetails.isEmpty()) {
			workflowDetails.sort(Comparator.comparing(WorkflowDetail::getSeq));
			int seq = 0;
			for(WorkflowDetail workflowDetail : workflowDetails) {
				if (seq == 0) {
					flowchartScript += ("st=>start: "  + workflowDetail.getActivity().getCode());
					flowchartSeq = "st(right)";
				}else {
					flowchartScript += "\n";
					flowchartScript += StringUtils.format("op{0}=>operation: {1}", seq, workflowDetail.getActivity().getCode());
					flowchartSeq += StringUtils.format("->op{0}(right)", seq);
				}
				seq++;
			}
			flowchartScript += "\n";
			flowchartScript += "e=>end: approved";
			flowchartSeq += "->e({\"stroke\":\"yellow\"})";
			flowchartScript += "\n";
			flowchartScript += flowchartSeq;
		}
		
		return flowchartScript;
	}

    @ManyToOne(optional=false, fetch = FetchType.LAZY)
	@JoinColumn(name="workflow_type_id", nullable=false)
	@NotFound(action = NotFoundAction.IGNORE)
    public OrganizationWorkflowType getWorkflowType(){
        return this.workflowType;
    }
    
    public void setWorkflowType(OrganizationWorkflowType workflowType){
        this.workflowType = workflowType;
    }
    
    @JsonProperty(value = "WorkflowName")
    @Column(name="workflow_name", length=200)
    @Field
    public String getWorkflowName(){
        return this.workflowName;
    }
    
    public void setWorkflowName(String workflowName){
        this.workflowName = workflowName;
    }

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Workflow pojo = (Workflow)o;
        return (new EqualsBuilder()
             .append(workflowType, pojo.workflowType)
             .append(workflowName, pojo.workflowName)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(workflowType)
             .append(workflowName)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("workflowID").append("='").append(getId()).append("', ");
        sb.append("workflowType").append("='").append(getWorkflowType()).append("', ");
        sb.append("workflowName").append("='").append(getWorkflowName()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}