// Created using LayerGen 3.5

package com.mds.aiotplayer.cm.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.aiotplayer.common.model.JsonDateSerializer;
import com.mds.aiotplayer.common.model.TreeEntity;
import com.mds.aiotplayer.core.MetadataItemName;
import com.mds.aiotplayer.sys.model.MenuFunction;
import com.mds.aiotplayer.sys.model.Role;
import com.mds.aiotplayer.common.model.DataEntity;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_album") //, uniqueConstraints = @UniqueConstraint(columnNames={"parent_id", "directory_name"})
@Indexed
@XmlRootElement
public class Album extends TreeEntity<Album> implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -5708942429581076795L;
    //private String name;
    private Long thumbnailContentObjectId;
    private MetadataItemName sortByMetaName;
    private boolean sortAscending;
    private int seq;
    private Date dateStart;
    private Date dateEnd;
    private String ownedBy;
    private String ownerRoleName;
    private boolean isPrivate;
    
    //protected Album parent;	// parent album
    //private List<Album> children = Lists.newArrayList();	// owner child albums
    private List<Role> roles = Lists.newArrayList();	// roles
    private List<UiTemplate> uiTemplates = Lists.newArrayList();   // templates for album
    private List<ContentObject> contentObjects = Lists.newArrayList();	// owner content objects
    private List<Metadata> metadatas = Lists.newArrayList();   // meta datas
    
    private Gallery gallery;
    private ContentObject thumbContentObject;
    
    public Album(){
		super();
	}
    
    public Album(Album parent){
		super();
		this.parent = parent;
	}
    
    public Album(Gallery gallery, Album parent, ContentObject thumbContentObject, final String name, final MetadataItemName sortByMetaName
    		, boolean sortAscending, final int seq, final Date dateStart, final Date dateEnd, final String ownedBy, final String ownerRoleName
    		, boolean isPrivate, final String currentUser){
		super();
		this.gallery = gallery;
		this.parent = parent;
		this.thumbContentObject = thumbContentObject;
		this.name = name;
		this.sortByMetaName = sortByMetaName;
		this.sortAscending = sortAscending;
		this.seq = seq;
		this.dateStart = dateStart;
		this.dateEnd = dateEnd;
		this.ownedBy = ownedBy;
		this.ownerRoleName = ownerRoleName;
		this.isPrivate = isPrivate;
		this.currentUser = currentUser;
	}
    
    @ManyToOne
    @JoinColumn(name="gallery_id", nullable=false)
    public Gallery getGallery() {
		return gallery;
	}

	public void setGallery(Gallery gallery) {
		this.gallery = gallery;
	}
	    
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true, mappedBy="album")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<Metadata> getMetadatas() {
		return metadatas;
	}
	
	public void setMetadatas(List<Metadata> metadatas) {
		this.metadatas = metadatas;
	}
    
    
    @ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name="parent_id", nullable=true)
	@NotFound(action = NotFoundAction.IGNORE)
	public Album getParent() {
		return parent;
	}

	public void setParent(Album parent) {
		this.parent = parent;
	}
    
    /**
	 * @return the contentObjects
	 */
	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="album")
	@OrderBy(value="seq") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<ContentObject> getContentObjects() {
		return contentObjects;
	}

	/**
	 * @param contentObjects the contentObjects to set
	 */
	public void setContentObjects(List<ContentObject> contentObjects) {
		this.contentObjects = contentObjects;
	}
	
	@JsonIgnore
	@Transient
	@Override
	public String getCode() {
		return code;
	}

	@JsonIgnore
	@Transient
	@Override
	public void setCode(String code) {
		this.code = code;
	}

	@JsonProperty(value = "Name")
    @Column(name="directory_name", nullable=false, length=255)
    @Field
    public String getName(){
        return this.name;
    }
    
    public void setName(String name){
        this.name = name;
    }
    
    /*@JsonProperty(value = "ThumbnailContentObjectId")
    @Column(name="ThumbnailContentObjectId", nullable=false)
    @Field*/
    @Transient
    public Long getThumbnailContentObjectId(){
        return this.thumbnailContentObjectId;
    }
    
    public void setThumbnailContentObjectId(Long thumbnailContentObjectId){
        this.thumbnailContentObjectId = thumbnailContentObjectId;
    }
    
    /**
	 * @return the thumbContentObject
	 */
    @OneToOne
    @JoinColumn(name="thumbnail_contentobject_id", nullable=true)
	public ContentObject getThumbContentObject() {
		return thumbContentObject;
	}

	/**
	 * @param thumbContentObject the thumbContentObject to set
	 */
	public void setThumbContentObject(ContentObject thumbContentObject) {
		this.thumbContentObject = thumbContentObject;
	}

	@JsonProperty(value = "SortByMetaName")
    @Column(name="sortby_metaname", nullable=false, length=100)
	@Enumerated(EnumType.STRING)
    @Field
    public MetadataItemName getSortByMetaName(){
        return this.sortByMetaName;
    }
    
    public void setSortByMetaName(MetadataItemName sortByMetaName){
        this.sortByMetaName = sortByMetaName;
    }
    
    @JsonProperty(value = "SortAscending")
    @Column(name="sort_ascending", nullable=false)
    @Field
    public boolean isSortAscending(){
        return this.sortAscending;
    }
    
    public void setSortAscending(boolean sortAscending){
        this.sortAscending = sortAscending;
    }
    
    @JsonProperty(value = "Seq")
    @Column(name="seq", nullable=false)
    @Field
    public int getSeq(){
        return this.seq;
    }
    
    public void setSeq(int seq){
        this.seq = seq;
    }
    
    @JsonProperty(value = "DateStart")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_start", length=19)
    @Field
    public Date getDateStart(){
        return this.dateStart;
    }
    
    public void setDateStart(Date dateStart){
        this.dateStart = dateStart;
    }
    
    @JsonProperty(value = "DateEnd")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="date_end", length=19)
    @Field
    public Date getDateEnd(){
        return this.dateEnd;
    }
    
    public void setDateEnd(Date dateEnd){
        this.dateEnd = dateEnd;
    }
    
    @JsonProperty(value = "OwnedBy")
    @Column(name="ownedby", nullable=false, length=256)
    @Field
    public String getOwnedBy(){
        return this.ownedBy;
    }
    
    public void setOwnedBy(String ownedBy){
        this.ownedBy = ownedBy;
    }
    
    @JsonProperty(value = "OwnerRoleName")
    @Column(name="owner_rolename", nullable=false, length=256)
    @Field
    public String getOwnerRoleName(){
        return this.ownerRoleName;
    }
    
    public void setOwnerRoleName(String ownerRoleName){
        this.ownerRoleName = ownerRoleName;
    }
    
    @JsonProperty(value = "IsPrivate")
    @Column(name="is_private", nullable=false)
    @Field
    public boolean isIsPrivate(){
        return this.isPrivate;
    }
    
    public void setIsPrivate(boolean isPrivate){
        this.isPrivate = isPrivate;
    }
    
    @OneToMany(cascade=CascadeType.ALL,orphanRemoval=true, mappedBy = "parent", fetch=FetchType.LAZY)
	@OrderBy(value="seq") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<Album> getChildren() {
		return children;
	}

	public void setChildren(List<Album> children) {
		this.children = children;
	}
	
	@ManyToMany(mappedBy = "albums", fetch=FetchType.LAZY)
	@OrderBy("id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<Role> getRoles() {
		return roles;
	}
	
	public void setRoles(List<Role> roles) {
		this.roles = roles;
	}


    @ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(
			name = "cm_album_uitemplate", 
			joinColumns = { @JoinColumn(name = "album_id") }, 
			inverseJoinColumns = { @JoinColumn(name = "uitemplate_id") })
	@OrderBy("id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
    public List<UiTemplate> getUiTemplates() {
		return uiTemplates;
	}

	public void setUiTemplates(List<UiTemplate> uiTemplates) {
		this.uiTemplates = uiTemplates;
	}

	/**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Album pojo = (Album)o;
        return (new EqualsBuilder()
             .append(name, pojo.name)
             .append(thumbnailContentObjectId, pojo.thumbnailContentObjectId)
             .append(sortByMetaName, pojo.sortByMetaName)
             .append(sortAscending, pojo.sortAscending)
             .append(seq, pojo.seq)
             .append(dateStart, pojo.dateStart)
             .append(dateEnd, pojo.dateEnd)
             .append(dateAdded, pojo.dateAdded)
             .append(createdBy, pojo.createdBy)
             .append(lastModifiedBy, pojo.lastModifiedBy)
             .append(dateLastModified, pojo.dateLastModified)
             .append(ownedBy, pojo.ownedBy)
             .append(ownerRoleName, pojo.ownerRoleName)
             .append(isPrivate, pojo.isPrivate)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(name)
             .append(thumbnailContentObjectId)
             .append(sortByMetaName)
             .append(sortAscending)
             .append(seq)
             .append(dateStart)
             .append(dateEnd)
             .append(dateAdded)
             .append(createdBy)
             .append(lastModifiedBy)
             .append(dateLastModified)
             .append(ownedBy)
             .append(ownerRoleName)
             .append(isPrivate)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("albumId").append("='").append(getId()).append("', ");
        sb.append("name").append("='").append(getName()).append("', ");
        sb.append("thumbnailContentObjectId").append("='").append(getThumbnailContentObjectId()).append("', ");
        sb.append("sortByMetaName").append("='").append(getSortByMetaName()).append("', ");
        sb.append("sortAscending").append("='").append(isSortAscending()).append("', ");
        sb.append("seq").append("='").append(getSeq()).append("', ");
        sb.append("dateStart").append("='").append(getDateStart()).append("', ");
        sb.append("dateEnd").append("='").append(getDateEnd()).append("', ");
        sb.append("dateAdded").append("='").append(getDateAdded()).append("', ");
        sb.append("createdBy").append("='").append(getCreatedBy()).append("', ");
        sb.append("lastModifiedBy").append("='").append(getLastModifiedBy()).append("', ");
        sb.append("dateLastModified").append("='").append(getDateLastModified()).append("', ");
        sb.append("ownedBy").append("='").append(getOwnedBy()).append("', ");
        sb.append("ownerRoleName").append("='").append(getOwnerRoleName()).append("', ");
        sb.append("isPrivate").append("='").append(isIsPrivate()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}