/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 4.0

package com.mds.aiotplayer.cm.model;

import com.mds.aiotplayer.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.mds.aiotplayer.common.model.JsonDateSerializer;
import com.mds.aiotplayer.sys.model.Organization;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_banner", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "content_name"}))
@Indexed
@XmlRootElement
public class Banner extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 3893439034007066629L;
	private String contentName;
    private String description;
    private byte nBg;
    private byte[] customComments;
    private String strXMLFormat;
    private String strFile;
    private Short nDirection;
    private Short nSpeed;
    private Short nTop;
    private Short nLeft;
    private Short nBehavior;
    private Short nValign;
    private Short nBullet;
    private Short nIndent;
    private Short nTemplate;
    private boolean bFontItalic;
    private boolean bFontBold;
    private boolean bFontUnderline;
    private boolean bStrikethrough;
    private boolean bHLColor;
    private String strTextFontName;
    private String strLanguage;
    private Short nTextFontSize;
    private int crTextFGColor;
    private int crTextBKColor;
    private int crTextHLColor;
    private String strHalign;
    private String strValign;
    private int nScrollAmount;
    
    private Organization organization;	// organization
    
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
	@JoinColumn(name="organization_id", nullable=true)
	@NotFound(action = NotFoundAction.IGNORE)
	@JsonIgnore
	public Organization getOrganization() {
		return organization;
	}

	public void setOrganization(Organization organization) {
		this.organization = organization;
	}    
     
    @JsonProperty(value = "contentName")
    @Column(name="content_name", nullable=false, length=50)
    @Field
    public String getContentName(){
        return this.contentName;
    }
    
    public void setContentName(String contentName){
        this.contentName = contentName;
    }
    
    @JsonProperty(value = "description")
    @Column(name="description", length=256)
    @Field
    public String getDescription(){
        return this.description;
    }
    
    public void setDescription(String description){
        this.description = description;
    }
    
    @JsonProperty(value = "nBg")
    @Column(name="nBg", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBg(){
        return this.nBg;
    }
    
    public void setBg(byte nBg){
        this.nBg = nBg;
    }
    
    /*@JsonProperty(value = "CustomComments")
    @Lob
    @Basic(fetch = FetchType.LAZY )
    @Column(name="CustomComments", columnDefinition = "BLOB")
    @Type(type="org.hibernate.type.WrappedMaterializedBlobType")
    public Byte[] getCustomComments(){
        return this.customComments;
    }*/
    
    @Basic(fetch = FetchType.LAZY )
    @Column(name="CustomComments", length = 104857600)
	@JsonIgnore
	public byte[] getCustomComments() {
		return customComments;
	}
    
    public void setCustomComments(byte[] customComments){
        this.customComments = customComments;
    }
    
    @JsonProperty(value = "strXMLFormat")
    @Column(name="strXMLFormat", length=1024)
    @Field
    public String getXMLFormat(){
        return this.strXMLFormat;
    }
    
    public void setXMLFormat(String strXMLFormat){
        this.strXMLFormat = strXMLFormat;
    }
    
    @JsonProperty(value = "strFile")
    @Column(name="strFile", length=1024)
    @Field
    public String getFile(){
        return this.strFile;
    }
    
    public void setFile(String strFile){
        this.strFile = strFile;
    }
    
    @JsonProperty(value = "nDirection")
    @Column(name="nDirection")
    @Field
    public Short getDirection(){
        return this.nDirection;
    }
    
    public void setDirection(Short nDirection){
        this.nDirection = nDirection;
    }
    
    @JsonProperty(value = "nSpeed")
    @Column(name="nSpeed")
    @Field
    public Short getSpeed(){
        return this.nSpeed;
    }
    
    public void setSpeed(Short nSpeed){
        this.nSpeed = nSpeed;
    }
    
    @JsonProperty(value = "nTop")
    @Column(name="nTop")
    @Field
    public Short getTop(){
        return this.nTop;
    }
    
    public void setTop(Short nTop){
        this.nTop = nTop;
    }
    
    @JsonProperty(value = "nLeft")
    @Column(name="nLeft")
    @Field
    public Short getLeft(){
        return this.nLeft;
    }
    
    public void setLeft(Short nLeft){
        this.nLeft = nLeft;
    }
    
    @JsonProperty(value = "nBehavior")
    @Column(name="nBehavior")
    @Field
    public Short getBehavior(){
        return this.nBehavior;
    }
    
    public void setBehavior(Short nBehavior){
        this.nBehavior = nBehavior;
    }
    
    @JsonProperty(value = "nValign")
    @Column(name="nValign")
    @Field
    public Short getValign(){
        return this.nValign;
    }
    
    public void setValign(Short nValign){
        this.nValign = nValign;
    }
    
    @JsonProperty(value = "nBullet")
    @Column(name="nBullet")
    @Field
    public Short getBullet(){
        return this.nBullet;
    }
    
    public void setBullet(Short nBullet){
        this.nBullet = nBullet;
    }
    
    @JsonProperty(value = "nIndent")
    @Column(name="nIndent")
    @Field
    public Short getIndent(){
        return this.nIndent;
    }
    
    public void setIndent(Short nIndent){
        this.nIndent = nIndent;
    }
    
    @JsonProperty(value = "nTemplate")
    @Column(name="nTemplate")
    @Field
    public Short getTemplate(){
        return this.nTemplate;
    }
    
    public void setTemplate(Short nTemplate){
        this.nTemplate = nTemplate;
    }
    
    @JsonProperty(value = "bFontItalic")
    @Column(name="bFontItalic", nullable=false)
    @Field
    public boolean isFontItalic(){
        return this.bFontItalic;
    }
    
    public void setFontItalic(boolean bFontItalic){
        this.bFontItalic = bFontItalic;
    }
    
    @JsonProperty(value = "bFontBold")
    @Column(name="bFontBold", nullable=false)
    @Field
    public boolean isFontBold(){
        return this.bFontBold;
    }
    
    public void setFontBold(boolean bFontBold){
        this.bFontBold = bFontBold;
    }
    
    @JsonProperty(value = "bFontUnderline")
    @Column(name="bFontUnderline", nullable=false)
    @Field
    public boolean isFontUnderline(){
        return this.bFontUnderline;
    }
    
    public void setFontUnderline(boolean bFontUnderline){
        this.bFontUnderline = bFontUnderline;
    }
    
    @JsonProperty(value = "bStrikethrough")
    @Column(name="bStrikethrough", nullable=false)
    @Field
    public boolean isStrikethrough(){
        return this.bStrikethrough;
    }
    
    public void setStrikethrough(boolean bStrikethrough){
        this.bStrikethrough = bStrikethrough;
    }
    
    @JsonProperty(value = "bHLColor")
    @Column(name="bHLColor", nullable=false)
    @Field
    public boolean isHLColor(){
        return this.bHLColor;
    }
    
    public void setHLColor(boolean bHLColor){
        this.bHLColor = bHLColor;
    }
    
    @JsonProperty(value = "strTextFontName")
    @Column(name="strTextFontName", length=50)
    @Field
    public String getTextFontName(){
        return this.strTextFontName;
    }
    
    public void setTextFontName(String strTextFontName){
        this.strTextFontName = strTextFontName;
    }
    
    @JsonProperty(value = "strLanguage")
    @Column(name="strLanguage", length=20)
    @Field
    public String getLanguage(){
        return this.strLanguage;
    }
    
    public void setLanguage(String strLanguage){
        this.strLanguage = strLanguage;
    }
    
    @JsonProperty(value = "nTextFontSize")
    @Column(name="nTextFontSize")
    @Field
    public Short getTextFontSize(){
        return this.nTextFontSize;
    }
    
    public void setTextFontSize(Short nTextFontSize){
        this.nTextFontSize = nTextFontSize;
    }
    
    @JsonProperty(value = "crTextFGColor")
    @Column(name="crTextFGColor", nullable=false)
    @Field
    public int getTextFGColor(){
        return this.crTextFGColor;
    }
    
    public void setTextFGColor(int crTextFGColor){
        this.crTextFGColor = crTextFGColor;
    }
    
    @JsonProperty(value = "crTextBKColor")
    @Column(name="crTextBKColor", nullable=false)
    @Field
    public int getTextBKColor(){
        return this.crTextBKColor;
    }
    
    public void setTextBKColor(int crTextBKColor){
        this.crTextBKColor = crTextBKColor;
    }
    
    @JsonProperty(value = "crTextHLColor")
    @Column(name="crTextHLColor", nullable=false)
    @Field
    public int getTextHLColor(){
        return this.crTextHLColor;
    }
    
    public void setTextHLColor(int crTextHLColor){
        this.crTextHLColor = crTextHLColor;
    }
    
    @JsonProperty(value = "strHalign")
    @Column(name="strHalign", nullable=false, length=20)
    @Field
    public String getHalign(){
        return this.strHalign;
    }
    
    public void setHalign(String strHalign){
        this.strHalign = strHalign;
    }
    
    @JsonProperty(value = "strValign")
    @Column(name="strValign", nullable=false, length=20)
    @Field
    public String getValignString(){
        return this.strValign;
    }
    
    public void setValignString(String strValign){
        this.strValign = strValign;
    }
    
    @JsonProperty(value = "nScrollAmount")
    @Column(name="nScrollAmount", nullable=false)
    @Field
    public int getScrollAmount(){
        return this.nScrollAmount;
    }
    
    public void setScrollAmount(int nScrollAmount){
        this.nScrollAmount = nScrollAmount;
    }
    

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Banner pojo = (Banner)o;
        return (new EqualsBuilder()
             .append(contentName, pojo.contentName)
             .append(description, pojo.description)
             .append(nBg, pojo.nBg)
             .append(customComments, pojo.customComments)
             .append(strXMLFormat, pojo.strXMLFormat)
             .append(strFile, pojo.strFile)
             .append(nDirection, pojo.nDirection)
             .append(nSpeed, pojo.nSpeed)
             .append(nTop, pojo.nTop)
             .append(nLeft, pojo.nLeft)
             .append(nBehavior, pojo.nBehavior)
             .append(nValign, pojo.nValign)
             .append(nBullet, pojo.nBullet)
             .append(nIndent, pojo.nIndent)
             .append(nTemplate, pojo.nTemplate)
             .append(bFontItalic, pojo.bFontItalic)
             .append(bFontBold, pojo.bFontBold)
             .append(bFontUnderline, pojo.bFontUnderline)
             .append(bStrikethrough, pojo.bStrikethrough)
             .append(bHLColor, pojo.bHLColor)
             .append(strTextFontName, pojo.strTextFontName)
             .append(strLanguage, pojo.strLanguage)
             .append(nTextFontSize, pojo.nTextFontSize)
             .append(crTextFGColor, pojo.crTextFGColor)
             .append(crTextBKColor, pojo.crTextBKColor)
             .append(crTextHLColor, pojo.crTextHLColor)
             .append(strHalign, pojo.strHalign)
             .append(strValign, pojo.strValign)
             .append(nScrollAmount, pojo.nScrollAmount)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(contentName)
             .append(description)
             .append(nBg)
             .append(customComments)
             .append(strXMLFormat)
             .append(strFile)
             .append(nDirection)
             .append(nSpeed)
             .append(nTop)
             .append(nLeft)
             .append(nBehavior)
             .append(nValign)
             .append(nBullet)
             .append(nIndent)
             .append(nTemplate)
             .append(bFontItalic)
             .append(bFontBold)
             .append(bFontUnderline)
             .append(bStrikethrough)
             .append(bHLColor)
             .append(strTextFontName)
             .append(strLanguage)
             .append(nTextFontSize)
             .append(crTextFGColor)
             .append(crTextBKColor)
             .append(crTextHLColor)
             .append(strHalign)
             .append(strValign)
             .append(nScrollAmount)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Id").append("='").append(getId()).append("', ");
        sb.append("contentName").append("='").append(getContentName()).append("', ");
        sb.append("description").append("='").append(getDescription()).append("', ");
        sb.append("nBg").append("='").append(getBg()).append("', ");
        sb.append("customComments").append("='").append(getCustomComments()).append("', ");
        sb.append("strXMLFormat").append("='").append(getXMLFormat()).append("', ");
        sb.append("strFile").append("='").append(getFile()).append("', ");
        sb.append("nDirection").append("='").append(getDirection()).append("', ");
        sb.append("nSpeed").append("='").append(getSpeed()).append("', ");
        sb.append("nTop").append("='").append(getTop()).append("', ");
        sb.append("nLeft").append("='").append(getLeft()).append("', ");
        sb.append("nBehavior").append("='").append(getBehavior()).append("', ");
        sb.append("nValign").append("='").append(getValign()).append("', ");
        sb.append("nBullet").append("='").append(getBullet()).append("', ");
        sb.append("nIndent").append("='").append(getIndent()).append("', ");
        sb.append("nTemplate").append("='").append(getTemplate()).append("', ");
        sb.append("bFontItalic").append("='").append(isFontItalic()).append("', ");
        sb.append("bFontBold").append("='").append(isFontBold()).append("', ");
        sb.append("bFontUnderline").append("='").append(isFontUnderline()).append("', ");
        sb.append("bStrikethrough").append("='").append(isStrikethrough()).append("', ");
        sb.append("bHLColor").append("='").append(isHLColor()).append("', ");
        sb.append("strTextFontName").append("='").append(getTextFontName()).append("', ");
        sb.append("strLanguage").append("='").append(getLanguage()).append("', ");
        sb.append("nTextFontSize").append("='").append(getTextFontSize()).append("', ");
        sb.append("crTextFGColor").append("='").append(getTextFGColor()).append("', ");
        sb.append("crTextBKColor").append("='").append(getTextBKColor()).append("', ");
        sb.append("crTextHLColor").append("='").append(getTextHLColor()).append("', ");
        sb.append("strHalign").append("='").append(getHalign()).append("', ");
        sb.append("strValign").append("='").append(getValignString()).append("', ");
        sb.append("nScrollAmount").append("='").append(getScrollAmount()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}