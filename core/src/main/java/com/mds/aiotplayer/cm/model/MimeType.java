/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 3.5

package com.mds.aiotplayer.cm.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.aiotplayer.common.model.JsonDateSerializer;
import com.mds.aiotplayer.common.model.IdEntity;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_mimetype" )
@Indexed
@XmlRootElement
public class MimeType extends IdEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -1150640883490728972L;
    private String fileExtension;
    private String mimeTypeValue;
    private String browserMimeTypeValue;
    
    private List<MimeTypeGallery> mimeTypeGallerys = Lists.newArrayList();   // mimetypes for gallery
    
    public MimeType(){
		super();
	}
    
    public MimeType(final String fileExtension, final String mimeTypeValue, final String browserMimeTypeValue){
		super();
		this.fileExtension = fileExtension;
		this.mimeTypeValue = mimeTypeValue;
		this.browserMimeTypeValue = browserMimeTypeValue;
	}
    
    @JsonProperty(value = "FileExtension")
    @Column(name="file_extension", nullable=false, length=10)
    @Field
    public String getFileExtension(){
        return this.fileExtension;
    }
    
    public void setFileExtension(String fileExtension){
        this.fileExtension = fileExtension;
    }
    
    @JsonProperty(value = "MimeTypeValue")
    @Column(name="mime_type_value", nullable=false, length=200)
    @Field
    public String getMimeTypeValue(){
        return this.mimeTypeValue;
    }
    
    public void setMimeTypeValue(String mimeTypeValue){
        this.mimeTypeValue = mimeTypeValue;
    }
    
    @JsonProperty(value = "BrowserMimeTypeValue")
    @Column(name="browser_mime_type_value", nullable=false, length=200)
    @Field
    public String getBrowserMimeTypeValue(){
        return this.browserMimeTypeValue;
    }
    
    public void setBrowserMimeTypeValue(String browserMimeTypeValue){
        this.browserMimeTypeValue = browserMimeTypeValue;
    }
    
    @OneToMany(cascade=CascadeType.REMOVE, fetch = FetchType.EAGER, orphanRemoval = true, mappedBy="mimeType")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<MimeTypeGallery> getMimeTypeGallerys() {
		return mimeTypeGallerys;
	}

	public void setMimeTypeGallerys(List<MimeTypeGallery> mimeTypeGallerys) {
		this.mimeTypeGallerys = mimeTypeGallerys;
	}

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        MimeType pojo = (MimeType)o;
        return (new EqualsBuilder()
             .append(fileExtension, pojo.fileExtension)
             .append(mimeTypeValue, pojo.mimeTypeValue)
             .append(browserMimeTypeValue, pojo.browserMimeTypeValue)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(fileExtension)
             .append(mimeTypeValue)
             .append(browserMimeTypeValue)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("mimeTypeId").append("='").append(getId()).append("', ");
        sb.append("fileExtension").append("='").append(getFileExtension()).append("', ");
        sb.append("mimeTypeValue").append("='").append(getMimeTypeValue()).append("', ");
        sb.append("browserMimeTypeValue").append("='").append(getBrowserMimeTypeValue()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}