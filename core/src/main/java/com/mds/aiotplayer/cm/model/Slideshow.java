/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 4.0

package com.mds.aiotplayer.cm.model;

import com.mds.aiotplayer.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.mds.aiotplayer.common.model.JsonDateSerializer;
import com.mds.aiotplayer.sys.model.Organization;

import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_slideshow", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "content_name", "type"}))
@Indexed
@XmlRootElement
public class Slideshow extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -2906942451254432986L;
	private String contentName;
    private String description;
    private byte type;
    private String strFile;
    private byte[] arrImage;
    private int crBGColor;
    private String strBGFile;
    private boolean bSelectBgPic;
    private boolean bAspectRatio;
    private BigDecimal nDuration;
    private short nEffectType;
    private short nOrientation;
    private short nMotion;
    private short nDelay;
    private short nDirection;
    private short nSwapDelay;
    private short nPerSecond;
    private boolean bRandomTransition;
    
    private Organization organization;	// organization
    
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
	@JoinColumn(name="organization_id", nullable=true)
	@NotFound(action = NotFoundAction.IGNORE)
	@JsonIgnore
	public Organization getOrganization() {
		return organization;
	}

	public void setOrganization(Organization organization) {
		this.organization = organization;
	}
     
    @JsonProperty(value = "contentName")
    @Column(name="content_name", nullable=false, length=50)
    @Field
    public String getContentName(){
        return this.contentName;
    }
    
    public void setContentName(String contentName){
        this.contentName = contentName;
    }
    
    @JsonProperty(value = "description")
    @Column(name="description", nullable=false, length=256)
    @Field
    public String getDescription(){
        return this.description;
    }
    
    public void setDescription(String description){
        this.description = description;
    }
    
    @JsonProperty(value = "type")
    @Column(name="type", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getType(){
        return this.type;
    }
    
    public void setType(byte type){
        this.type = type;
    }
    
    @JsonProperty(value = "strFile")
    @Column(name="strFile", nullable=false, length=1024)
    @Field
    public String getFile(){
        return this.strFile;
    }
    
    public void setFile(String strFile){
        this.strFile = strFile;
    }
    
   /* @JsonProperty(value = "arrImage")
    @Lob
    @Basic(fetch = FetchType.LAZY )
    @Column(name="arrImage", columnDefinition = "BLOB")
    @Type(type="org.hibernate.type.WrappedMaterializedBlobType")
    public Byte[] getArrImage(){
        return this.arrImage;
    }*/
    
    @Basic(fetch = FetchType.LAZY )
    @Column(name="arrImage", length = 1048576)
	@JsonIgnore
	public byte[] getArrImage() {
		return arrImage;
	}
    
    public void setArrImage(byte[] arrImage){
        this.arrImage = arrImage;
    }
    
    @JsonProperty(value = "crBGColor")
    @Column(name="crBGColor", nullable=false)
    @Field
    public int getBGColor(){
        return this.crBGColor;
    }
    
    public void setBGColor(int crBGColor){
        this.crBGColor = crBGColor;
    }
    
    @JsonProperty(value = "strBGFile")
    @Column(name="strBGFile", nullable=false, length=1024)
    @Field
    public String getBGFile(){
        return this.strBGFile;
    }
    
    public void setBGFile(String strBGFile){
        this.strBGFile = strBGFile;
    }
    
    @JsonProperty(value = "bSelectBgPic")
    @Column(name="bSelectBgPic", nullable=false)
    @Field
    public boolean isSelectBgPic(){
        return this.bSelectBgPic;
    }
    
    public void setSelectBgPic(boolean bSelectBgPic){
        this.bSelectBgPic = bSelectBgPic;
    }
    
    @JsonProperty(value = "bAspectRatio")
    @Column(name="bAspectRatio", nullable=false)
    @Field
    public boolean isAspectRatio(){
        return this.bAspectRatio;
    }
    
    public void setAspectRatio(boolean bAspectRatio){
        this.bAspectRatio = bAspectRatio;
    }
    
    @JsonProperty(value = "nDuration")
    @Column(name="nDuration", precision=10, scale=2)
    @Field
    public BigDecimal getNDuration(){
        return this.nDuration;
    }
    
    public void setNDuration(BigDecimal nDuration){
        this.nDuration = nDuration;
    }
    
    @JsonProperty(value = "nEffectType")
    @Column(name="nEffectType", nullable=false)
    @Field
    public short getEffectType(){
        return this.nEffectType;
    }
    
    public void setEffectType(short nEffectType){
        this.nEffectType = nEffectType;
    }
    
    @JsonProperty(value = "nOrientation")
    @Column(name="nOrientation", nullable=false)
    @Field
    public short getOrientation(){
        return this.nOrientation;
    }
    
    public void setOrientation(short nOrientation){
        this.nOrientation = nOrientation;
    }
    
    @JsonProperty(value = "nMotion")
    @Column(name="nMotion", nullable=false)
    @Field
    public short getMotion(){
        return this.nMotion;
    }
    
    public void setMotion(short nMotion){
        this.nMotion = nMotion;
    }
    
    @JsonProperty(value = "nDelay")
    @Column(name="nDelay", nullable=false)
    @Field
    public short getDelay(){
        return this.nDelay;
    }
    
    public void setDelay(short nDelay){
        this.nDelay = nDelay;
    }
    
    @JsonProperty(value = "nDirection")
    @Column(name="nDirection", nullable=false)
    @Field
    public short getDirection(){
        return this.nDirection;
    }
    
    public void setDirection(short nDirection){
        this.nDirection = nDirection;
    }
    
    @JsonProperty(value = "nSwapDelay")
    @Column(name="nSwapDelay", nullable=false)
    @Field
    public short getSwapDelay(){
        return this.nSwapDelay;
    }
    
    public void setSwapDelay(short nSwapDelay){
        this.nSwapDelay = nSwapDelay;
    }
    
    @JsonProperty(value = "nPerSecond")
    @Column(name="nPerSecond", nullable=false)
    @Field
    public short getPerSecond(){
        return this.nPerSecond;
    }
    
    public void setPerSecond(short nPerSecond){
        this.nPerSecond = nPerSecond;
    }
    
    @JsonProperty(value = "bRandomTransition")
    @Column(name="bRandomTransition", nullable=false)
    @Field
    public boolean isRandomTransition(){
        return this.bRandomTransition;
    }
    
    public void setRandomTransition(boolean bRandomTransition){
        this.bRandomTransition = bRandomTransition;
    }
    
    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Slideshow pojo = (Slideshow)o;
        return (new EqualsBuilder()
             .append(contentName, pojo.contentName)
             .append(description, pojo.description)
             .append(type, pojo.type)
             .append(strFile, pojo.strFile)
             .append(arrImage, pojo.arrImage)
             .append(crBGColor, pojo.crBGColor)
             .append(strBGFile, pojo.strBGFile)
             .append(bSelectBgPic, pojo.bSelectBgPic)
             .append(bAspectRatio, pojo.bAspectRatio)
             .append(nDuration, pojo.nDuration)
             .append(nEffectType, pojo.nEffectType)
             .append(nOrientation, pojo.nOrientation)
             .append(nMotion, pojo.nMotion)
             .append(nDelay, pojo.nDelay)
             .append(nDirection, pojo.nDirection)
             .append(nSwapDelay, pojo.nSwapDelay)
             .append(nPerSecond, pojo.nPerSecond)
             .append(bRandomTransition, pojo.bRandomTransition)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(contentName)
             .append(description)
             .append(type)
             .append(strFile)
             .append(arrImage)
             .append(crBGColor)
             .append(strBGFile)
             .append(bSelectBgPic)
             .append(bAspectRatio)
             .append(nDuration)
             .append(nEffectType)
             .append(nOrientation)
             .append(nMotion)
             .append(nDelay)
             .append(nDirection)
             .append(nSwapDelay)
             .append(nPerSecond)
             .append(bRandomTransition)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Id").append("='").append(getId()).append("', ");
        sb.append("contentName").append("='").append(getContentName()).append("', ");
        sb.append("description").append("='").append(getDescription()).append("', ");
        sb.append("type").append("='").append(getType()).append("', ");
        sb.append("strFile").append("='").append(getFile()).append("', ");
        sb.append("arrImage").append("='").append(getArrImage()).append("', ");
        sb.append("crBGColor").append("='").append(getBGColor()).append("', ");
        sb.append("strBGFile").append("='").append(getBGFile()).append("', ");
        sb.append("bSelectBgPic").append("='").append(isSelectBgPic()).append("', ");
        sb.append("bAspectRatio").append("='").append(isAspectRatio()).append("', ");
        sb.append("nDuration").append("='").append(getNDuration()).append("', ");
        sb.append("nEffectType").append("='").append(getEffectType()).append("', ");
        sb.append("nOrientation").append("='").append(getOrientation()).append("', ");
        sb.append("nMotion").append("='").append(getMotion()).append("', ");
        sb.append("nDelay").append("='").append(getDelay()).append("', ");
        sb.append("nDirection").append("='").append(getDirection()).append("', ");
        sb.append("nSwapDelay").append("='").append(getSwapDelay()).append("', ");
        sb.append("nPerSecond").append("='").append(getPerSecond()).append("', ");
        sb.append("bRandomTransition").append("='").append(isRandomTransition()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}