/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 4.0

package com.mds.aiotplayer.pl.model;

import com.mds.aiotplayer.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.aiotplayer.common.model.JsonDateSerializer;
import com.mds.aiotplayer.sys.model.Organization;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="pl_layoutmst", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "layout_name"}))
@Indexed
@XmlRootElement
public class LayoutMst extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -4528179121701507146L;
	private String layoutName;
    private String layoutDesc;
    private Integer groupID;
    private Short zoneNumber;   
    private Short screenWidth;
    private Short screenHeight;
    private String strImageFile;
    private Byte[] byImage;
    
    private List<LayoutDtl> layoutDtls = Lists.newArrayList(); // layout details
    private Organization organization;	// organization
        
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
   	@JoinColumn(name="organization_id", nullable=true)
   	@NotFound(action = NotFoundAction.IGNORE)
   	@JsonIgnore
   	public Organization getOrganization() {
   		return organization;
   	}

   	public void setOrganization(Organization organization) {
   		this.organization = organization;
   	}
     
    @JsonProperty(value = "layoutName")
    @Column(name="layout_name", length=50)
    @Field
    public String getLayoutName(){
        return this.layoutName;
    }
    
    public void setLayoutName(String layoutName){
        this.layoutName = layoutName;
    }
    
    @JsonProperty(value = "layoutDesc")
    @Column(name="layout_desc", length=256)
    @Field
    public String getLayoutDesc(){
        return this.layoutDesc;
    }
    
    public void setLayoutDesc(String layoutDesc){
        this.layoutDesc = layoutDesc;
    }
    
    @JsonProperty(value = "GroupID")
    @Column(name="GroupID")
    @Field
    public Integer getGroupId(){
        return this.groupID;
    }
    
    public void setGroupId(Integer groupID){
        this.groupID = groupID;
    }
    
    @JsonProperty(value = "ZoneNumber")
    @Column(name="zone_number")
    @Field
    public Short getZoneNumber(){
        return this.zoneNumber;
    }
    
    public void setZoneNumber(Short zoneNumber){
        this.zoneNumber = zoneNumber;
    }  
    
    @JsonProperty(value = "ScreenWidth")
    @Column(name="screen_width")
    @Field
    public Short getScreenWidth(){
        return this.screenWidth;
    }
    
    public void setScreenWidth(Short screenWidth){
        this.screenWidth = screenWidth;
    }
    
    @JsonProperty(value = "ScreenHeight")
    @Column(name="screen_height")
    @Field
    public Short getScreenHeight(){
        return this.screenHeight;
    }
    
    public void setScreenHeight(Short screenHeight){
        this.screenHeight = screenHeight;
    }  
    
    @JsonProperty(value = "strImageFile")
    @Column(name="strImageFile", length=255)
    @Field
    public String getImageFile(){
        return this.strImageFile;
    }
    
    public void setImageFile(String strImageFile){
        this.strImageFile = strImageFile;
    }
    
    @JsonProperty(value = "byImage")
    @Lob
    @Basic(fetch = FetchType.LAZY )
    @Column(name="byImage", columnDefinition = "BLOB")
    @Type(type="org.hibernate.type.WrappedMaterializedBlobType")
    public Byte[] getImage(){
        return this.byImage;
    }
    
    public void setImage(Byte[] byImage){
        this.byImage = byImage;
    }
    

    /**
	 * @return the layoutDtls
	 */
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="layoutMst")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<LayoutDtl> getLayoutDtls() {
		return layoutDtls;
	}

	/**
	 * @param layoutDtls the layoutDtls to set
	 */
	public void setLayoutDtls(List<LayoutDtl> layoutDtls) {
		this.layoutDtls = layoutDtls;
	}

	/**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        LayoutMst pojo = (LayoutMst)o;
        return (new EqualsBuilder()
             .append(layoutName, pojo.layoutName)
             .append(layoutDesc, pojo.layoutDesc)
             .append(groupID, pojo.groupID)
             .append(zoneNumber, pojo.zoneNumber)
             .append(screenWidth, pojo.screenWidth)
             .append(screenHeight, pojo.screenHeight)
             .append(strImageFile, pojo.strImageFile)
             .append(byImage, pojo.byImage)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(layoutName)
             .append(layoutDesc)
             .append(groupID)
             .append(zoneNumber)
             .append(screenWidth)
             .append(screenHeight)
             .append(strImageFile)
             .append(byImage)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("id").append("='").append(getId()).append("', ");
        sb.append("layoutName").append("='").append(getLayoutName()).append("', ");
        sb.append("layoutDesc").append("='").append(getLayoutDesc()).append("', ");
        sb.append("groupID").append("='").append(getGroupId()).append("', ");
        sb.append("zoneNumber").append("='").append(getZoneNumber()).append("', ");
        sb.append("screenWidth").append("='").append(getScreenWidth()).append("', ");
        sb.append("screenHeight").append("='").append(getScreenHeight()).append("', ");
        sb.append("strImageFile").append("='").append(getImageFile()).append("', ");
        sb.append("byImage").append("='").append(getImage()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}