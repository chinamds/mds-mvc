/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 3.5

package com.mds.aiotplayer.wf.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.mds.aiotplayer.common.model.DataEntity;
import com.mds.aiotplayer.sys.model.Organization;
import com.mds.aiotplayer.sys.model.User;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="wf_activity", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "code"}) )
@Indexed
@XmlRootElement
public class Activity extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1123281145914587789L;
	private String code;
    private String description;
    private Organization organization;	// organization
    
    private List<ActivityOrganizationUser> activityOrganizationUsers = Lists.newArrayList();   // organizations or users
    private List<WorkflowDetail> workflowDetails = Lists.newArrayList();	// workflow Details
    
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="activity")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
    public List<WorkflowDetail> getWorkflowDetails() {
		return workflowDetails;
	}

	public void setWorkflowDetails(List<WorkflowDetail> workflowDetails) {
		this.workflowDetails = workflowDetails;
	}
 
        
    @JsonProperty(value = "Code")
    @Column(name="code", nullable=false, length=100)
    @Field
    public String getCode(){
        return this.code;
    }
    
    public void setCode(String code){
        this.code = code;
    }
    
    @JsonProperty(value = "Description")
    @Column(name="description", length=200)
    @Field
    public String getDescription(){
        return this.description;
    }
    
    public void setDescription(String description){
        this.description = description;
    }
    
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
   	@JoinColumn(name="organization_id", nullable=true)
   	@NotFound(action = NotFoundAction.IGNORE)
   	@JsonIgnore
   	public Organization getOrganization() {
   		return organization;
   	}

   	public void setOrganization(Organization organization) {
   		this.organization = organization;
   	}
   	
   	@Transient
	@Field
	public String getOrganizationCode() {
		if (organization != null && !organization.isRoot())
			return organization.getCode();
		
		return "";
	}

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Activity pojo = (Activity)o;
        return (new EqualsBuilder()
             .append(code, pojo.code)
             .append(description, pojo.description)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(code)
             .append(description)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("code").append("='").append(getCode()).append("', ");
        sb.append("description").append("='").append(getDescription()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

     /**
 	 * @return the activityOrganizationUsers
 	 */
 	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="activity")
 	@OrderBy(value="id") 
 	@Fetch(FetchMode.SUBSELECT)
 	@NotFound(action = NotFoundAction.IGNORE)
 	
 	public List<ActivityOrganizationUser> getActivityOrganizationUsers() {
 		return activityOrganizationUsers;
 	}

 	/**
 	 * @param activityOrganizationUsers the activityOrganizationUsers to set
 	 */
 	public void setActivityOrganizationUsers(List<ActivityOrganizationUser> activityOrganizationUsers) {
 		this.activityOrganizationUsers = activityOrganizationUsers;
 	}
}