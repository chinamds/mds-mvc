/**
 * The contents of this file are subject to the license and copyright
 * detailed in the LICENSE and NOTICE files at the root of the source
 * tree and available online at
 *
 * https://github.com/chinamds/license/
 */
// Created using LayerGen 3.5

package com.mds.aiotplayer.i18n.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.mds.aiotplayer.common.model.IdEntity;
import com.mds.aiotplayer.sys.model.MenuFunction;
import com.mds.aiotplayer.common.utils.excel.annotation.ExcelField;
import com.mds.aiotplayer.common.model.DataEntity;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.Analyze;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.FullTextFilterDef;
import org.hibernate.search.annotations.FullTextFilterDefs;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.annotations.SortableField;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Cacheable;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="i18n_neutral_resource" )
@Cacheable
@org.hibernate.annotations.Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE, include = "non-lazy")
@Indexed
@XmlRootElement
public class NeutralResource extends IdEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 7317791097734400784L;
	private String resourceClass;
    private String resourceKey;
    private String value;
    private List<LocalizedResource> localizedResources = Lists.newArrayList(); // localized resources
    
    public NeutralResource() {
		super();
	}
        
    /**
     * Create a new instance and set the resourceKey.
     *
     * @param resourceKey resourceKey of the NeutralResource.
     */
	/*
	 * public NeutralResource(final String resourceKey) { this(); this.resourceKey =
	 * resourceKey; }
	 */
    
    /**
     * Create a new instance and set the id.
     *
     * @param id id of the NeutralResource.
     */
    public NeutralResource(final String id) {
    	this();
    	this.id = Long.valueOf(id);
    }
   
	@JsonProperty(value = "resourceClass")
    @Column(name="resource_class", length=100)
    @ExcelField(title="neutralResource.resourceClass", align=1, sort=20)
	@Field(analyze=Analyze.NO)
    @SortableField
    public String getResourceClass(){
        return this.resourceClass;
    }
    
    public void setResourceClass(String resourceClass){
        this.resourceClass = resourceClass;
    }
    
    @JsonProperty(value = "resourceKey")
    @Column(name="resource_key", length=256, unique=true)
    @ExcelField(title="neutralResource.resourceKey", align=1, sort=21)
    @Field(analyze=Analyze.NO)
    @SortableField
    public String getResourceKey(){
        return this.resourceKey;
    }
    
    public void setResourceKey(String resourceKey){
        this.resourceKey = resourceKey;
    }

    @JsonIgnore
    @Transient
    public String getStringKey(){
        return this.resourceClass + "." + this.resourceKey;
    }
    
    @JsonProperty(value = "value")
    @Column(name="value")
    @Type(type="text")
    @ExcelField(title="neutralResource.value", align=1, sort=22)
    @Field
    public String getValue(){
        return this.value;
    }
    
    public void setValue(String value){
        this.value = value;
    }
    
    @OneToMany(cascade=CascadeType.ALL, orphanRemoval = true, mappedBy = "neutralResource", fetch=FetchType.LAZY)
    @OrderBy("id") 
    @Fetch(FetchMode.SUBSELECT)
    @NotFound(action = NotFoundAction.IGNORE)
    @JsonIgnore
    public List<LocalizedResource> getLocalizedResources() {
    	return localizedResources;
    }
    
    public void setLocalizedResources(List<LocalizedResource> localizedResources) {
    	this.localizedResources = localizedResources;
    }

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        NeutralResource pojo = (NeutralResource)o;
        return (new EqualsBuilder()
             .append(resourceClass, pojo.resourceClass)
             .append(resourceKey, pojo.resourceKey)
             .append(value, pojo.value)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(resourceClass)
             .append(resourceKey)
             .append(value)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("resource_class").append("='").append(getResourceClass()).append("', ");
        sb.append("key").append("='").append(getResourceKey()).append("', ");
        sb.append("value").append("='").append(getValue()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }
     
    @Override
 	public void copyFrom(Object source) {
    	NeutralResource src = (NeutralResource)source;
 		this.resourceClass = src.getResourceClass(); 	// resouce class
 		this.resourceKey = src.getResourceKey(); 	// resource key
 		this.value = src.getValue(); 	// value
 	}
}