/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.aiotplayer.ps.model;

import com.mds.aiotplayer.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.mds.aiotplayer.common.model.JsonDateSerializer;

import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="ps_calendar", uniqueConstraints = @UniqueConstraint(columnNames={"channel_id", "dtDay"}))
@Indexed
@XmlRootElement
public class Calendar extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 5397955640621356833L;
	private Channel channel;
    private Date dtDay;
    private String strEvent;
    private Byte[] arrEvent;
    private byte nPlayMeth;
    private short approvalLevel;
    private short approvalStatus;
    private String remark;

    @ManyToOne
    @JoinColumn(name="channel_id", nullable=false)
    public Channel getChannel() {
		return channel;
	}

	public void setChannel(Channel channel) {
		this.channel = channel;
	}

	@JsonProperty(value = "dtDay")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtDay", nullable=false, length=19)
    @Field
    public Date getDay(){
        return this.dtDay;
    }
    
    public void setDay(Date dtDay){
        this.dtDay = dtDay;
    }
    
    @JsonProperty(value = "strEvent")
    @Column(name="strEvent", length=50)
    @Field
    public String getEvent(){
        return this.strEvent;
    }
    
    public void setEvent(String strEvent){
        this.strEvent = strEvent;
    }
    
    /*@JsonProperty(value = "arrEvent")
    @Lob
    @Basic(fetch = FetchType.LAZY )
    @Column(name="arrEvent", columnDefinition = "BLOB")
    @Type(type="org.hibernate.type.WrappedMaterializedBlobType")*/
    @Basic(fetch = FetchType.LAZY )
    @Column(name="arrEvent", length = 1048576)
	@JsonIgnore
    public Byte[] getArrEvent(){
        return this.arrEvent;
    }
    
    public void setArrEvent(Byte[] arrEvent){
        this.arrEvent = arrEvent;
    }
    
    @JsonProperty(value = "nPlayMeth")
    @Column(name="nPlayMeth", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getPlayMeth(){
        return this.nPlayMeth;
    }
    
    public void setPlayMeth(byte nPlayMeth){
        this.nPlayMeth = nPlayMeth;
    }
    
    @JsonProperty(value = "ApprovalLevel")
    @Column(name="ApprovalLevel", nullable=false)
    @Field
    public short getApprovalLevel(){
        return this.approvalLevel;
    }
    
    public void setApprovalLevel(short approvalLevel){
        this.approvalLevel = approvalLevel;
    }
    
    @JsonProperty(value = "ApprovalStatus")
    @Column(name="ApprovalStatus", nullable=false)
    @Field
    public short getApprovalStatus(){
        return this.approvalStatus;
    }
    
    public void setApprovalStatus(short approvalStatus){
        this.approvalStatus = approvalStatus;
    }
    
    @JsonProperty(value = "Remark")
    @Column(name="Remark")
    @Type(type="text")
    @Field
    public String getRemark(){
        return this.remark;
    }
    
    public void setRemark(String remark){
        this.remark = remark;
    }

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Calendar pojo = (Calendar)o;
        return (new EqualsBuilder()
             .append(dtDay, pojo.dtDay)
             .append(strEvent, pojo.strEvent)
             .append(arrEvent, pojo.arrEvent)
             .append(nPlayMeth, pojo.nPlayMeth)
             .append(approvalLevel, pojo.approvalLevel)
             .append(approvalStatus, pojo.approvalStatus)
             .append(remark, pojo.remark)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(dtDay)
             .append(strEvent)
             .append(arrEvent)
             .append(nPlayMeth)
             .append(approvalLevel)
             .append(approvalStatus)
             .append(remark)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Id").append("='").append(getId()).append("', ");
        sb.append("dtDay").append("='").append(getDay()).append("', ");
        sb.append("strEvent").append("='").append(getEvent()).append("', ");
        sb.append("arrEvent").append("='").append(getArrEvent()).append("', ");
        sb.append("nPlayMeth").append("='").append(getPlayMeth()).append("', ");
        sb.append("approvalLevel").append("='").append(getApprovalLevel()).append("', ");
        sb.append("approvalStatus").append("='").append(getApprovalStatus()).append("', ");
        sb.append("remark").append("='").append(getRemark()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}