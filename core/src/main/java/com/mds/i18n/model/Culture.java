// Created using LayerGen 3.5

package com.mds.i18n.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.mds.common.model.IdEntity;
import com.mds.sys.model.Organization;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="i18n_culture" )
@Indexed
@XmlRootElement
public class Culture extends IdEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -5494886741213078870L;
	private String cultureCode;
    private String cultureName;
    
    private List<LocalizedResource> localizedResources = Lists.newArrayList(); // localized resources
    private List<Organization> organizations = Lists.newArrayList(); // organizations
    
    /**
     * Default constructor - creates a new instance with no values set.
     */
    public Culture() {
    	super();
    }

    /**
     * Create a new instance and set the name.
     *
     * @param cultureCode culture code of the culture.
     */
    public Culture(final String cultureCode) {
    	this();
        this.cultureCode = cultureCode;
    }
 
    @JsonProperty(value = "culture_code")
    @Column(name="culture_code", length=256, unique=true, nullable=false)
    @Field
    public String getCultureCode(){
        return this.cultureCode;
    }
    
    public void setCultureCode(String cultureCode){
        this.cultureCode = cultureCode;
    }
    
    @JsonProperty(value = "culture_name")
    @Column(name="culture_name", length=256)
    @Field
    public String getCultureName(){
        return this.cultureName;
    }
    
    public void setCultureName(String cultureName){
        this.cultureName = cultureName;
    }
    
    @OneToMany(cascade=CascadeType.ALL, mappedBy = "preferredlanguage", fetch=FetchType.LAZY)
	@OrderBy(value="code") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	@JsonManagedReference
    public List<Organization> getOrganizations() {
		return organizations;
	}

	public void setOrganizations(List<Organization> organizations) {
		this.organizations = organizations;
	}
    
    @OneToMany(cascade=CascadeType.ALL, orphanRemoval = true, mappedBy = "culture", fetch=FetchType.LAZY)
    @OrderBy("id") 
    @Fetch(FetchMode.SUBSELECT)
    @NotFound(action = NotFoundAction.IGNORE)
    @Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    public List<LocalizedResource> getLocalizedResources() {
    	return localizedResources;
    }

    public void setLocalizedResources(List<LocalizedResource> localizedResources) {
    	this.localizedResources = localizedResources;
    }
    
    @Transient
    public String getLocalizedResourceValue(Long resourceId){
    	if (localizedResources != null){
    		for (LocalizedResource localizedResource : localizedResources){
    			if (localizedResource.getNeutralResource().getId() == resourceId)
    				return localizedResource.getValue();
    		}
    	}
    	
    	return null;
    }

    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Culture pojo = (Culture)o;
        return (new EqualsBuilder()
             .append(cultureCode, pojo.cultureCode)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(cultureCode)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("culture_code").append("='").append(getCultureCode()).append("', ");
        sb.append("culture_name").append("='").append(getCultureName()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}