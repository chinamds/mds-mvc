/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.ps.model;

import com.mds.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.common.model.JsonDateSerializer;
import com.mds.sys.model.Organization;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="ps_channel", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "channelName"}))
@Indexed
@XmlRootElement
public class Channel extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 5239749223141396447L;
    private String channelName;
    private String channelDesc;
    private byte bIncludeToday;
    private byte bImm;
    private byte bAllContent;
    private short nPeriod;
    private String strDefPlaylist;
    private String strFtpTime;
    private String strTimeOuts;
    
    private Organization organization;	// organization
    
    private List<Calendar> calendars = Lists.newArrayList(); //calendars
    private List<PlayerTuner> playerTuner = Lists.newArrayList(); //channel Mapping
    
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
	@JoinColumn(name="organization_id", nullable=true)
	@NotFound(action = NotFoundAction.IGNORE)
	@JsonIgnore
	public Organization getOrganization() {
		return organization;
	}

	public void setOrganization(Organization organization) {
		this.organization = organization;
	}
    
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="channel")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
    public List<Calendar> getCalendars() {
		return calendars;
	}

	public void setCalendars(List<Calendar> calendars) {
		this.calendars = calendars;
	}

	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="channel")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<PlayerTuner> getPlayerTuner() {
		return playerTuner;
	}

	public void setPlayerTuner(List<PlayerTuner> playerTuner) {
		this.playerTuner = playerTuner;
	}

	@JsonProperty(value = "channelName")
    @Column(name="channelName", nullable=false, length=50)
    @Field
    public String getChannelName(){
        return this.channelName;
    }
    
    public void setChannelName(String channelName){
        this.channelName = channelName;
    }
    
    @JsonProperty(value = "channelDesc")
    @Column(name="channelDesc", nullable=false, length=256)
    @Field
    public String getChannelDesc(){
        return this.channelDesc;
    }
    
    public void setChannelDesc(String channelDesc){
        this.channelDesc = channelDesc;
    }
    
    @JsonProperty(value = "bIncludeToday")
    @Column(name="bIncludeToday", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBIncludeToday(){
        return this.bIncludeToday;
    }
    
    public void setBIncludeToday(byte bIncludeToday){
        this.bIncludeToday = bIncludeToday;
    }
    
    @JsonProperty(value = "bImm")
    @Column(name="bImm", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBImm(){
        return this.bImm;
    }
    
    public void setBImm(byte bImm){
        this.bImm = bImm;
    }
    
    @JsonProperty(value = "bAllContent")
    @Column(name="bAllContent", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBAllContent(){
        return this.bAllContent;
    }
    
    public void setBAllContent(byte bAllContent){
        this.bAllContent = bAllContent;
    }
    
    @JsonProperty(value = "nPeriod")
    @Column(name="nPeriod", nullable=false)
    @Field
    public short getPeriod(){
        return this.nPeriod;
    }
    
    public void setPeriod(short nPeriod){
        this.nPeriod = nPeriod;
    }
    
    @JsonProperty(value = "strDefPlaylist")
    @Column(name="strDefPlaylist", length=50)
    @Field
    public String getDefPlaylist(){
        return this.strDefPlaylist;
    }
    
    public void setDefPlaylist(String strDefPlaylist){
        this.strDefPlaylist = strDefPlaylist;
    }
    
    @JsonProperty(value = "strFtpTime")
    @Column(name="strFtpTime", length=5)
    @Field
    public String getFtpTime(){
        return this.strFtpTime;
    }
    
    public void setFtpTime(String strFtpTime){
        this.strFtpTime = strFtpTime;
    }
    
    @JsonProperty(value = "strTimeOuts")
    @Column(name="strTimeOuts", length=5)
    @Field
    public String getTimeOuts(){
        return this.strTimeOuts;
    }
    
    public void setTimeOuts(String strTimeOuts){
        this.strTimeOuts = strTimeOuts;
    }
 
    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Channel pojo = (Channel)o;
        return (new EqualsBuilder()
             .append(channelName, pojo.channelName)
             .append(channelDesc, pojo.channelDesc)
             .append(bIncludeToday, pojo.bIncludeToday)
             .append(bImm, pojo.bImm)
             .append(bAllContent, pojo.bAllContent)
             .append(nPeriod, pojo.nPeriod)
             .append(strDefPlaylist, pojo.strDefPlaylist)
             .append(strFtpTime, pojo.strFtpTime)
             .append(strTimeOuts, pojo.strTimeOuts)
              ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(channelName)
             .append(channelDesc)
             .append(bIncludeToday)
             .append(bImm)
             .append(bAllContent)
             .append(nPeriod)
             .append(strDefPlaylist)
             .append(strFtpTime)
             .append(strTimeOuts)
              .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("Id").append("='").append(getId()).append("', ");
        sb.append("channelName").append("='").append(getChannelName()).append("', ");
        sb.append("channelDesc").append("='").append(getChannelDesc()).append("', ");
        sb.append("bIncludeToday").append("='").append(getBIncludeToday()).append("', ");
        sb.append("bImm").append("='").append(getBImm()).append("', ");
        sb.append("bAllContent").append("='").append(getBAllContent()).append("', ");
        sb.append("nPeriod").append("='").append(getPeriod()).append("', ");
        sb.append("strDefPlaylist").append("='").append(getDefPlaylist()).append("', ");
        sb.append("strFtpTime").append("='").append(getFtpTime()).append("', ");
        sb.append("strTimeOuts").append("='").append(getTimeOuts()).append("', ");
         sb.append("]");
        
        return sb.toString();
    }

}