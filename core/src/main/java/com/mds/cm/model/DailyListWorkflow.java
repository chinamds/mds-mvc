// Created using LayerGen 3.5

package com.mds.cm.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.collect.Lists;
import com.mds.common.model.DataEntity;
import com.mds.util.StringUtils;
import com.mds.wf.model.Workflow;
import com.mds.wf.model.WorkflowDetail;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_dailylist_workflow", uniqueConstraints = @UniqueConstraint(columnNames={"dailylist_id", "workflow_id", "workflow_type"}) )
@Indexed
@XmlRootElement
public class DailyListWorkflow extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 9057697934087315310L;
	/**
	 * 
	 */
	private Long dailyListId;
    private Long workflowId;
    private short workflowType;
    private short status;
    
    private DailyList dailyList;
    private Workflow workflow;
    private List<DailyListActivity> dailyListActivities = Lists.newArrayList();	// dailyList activities
    
    public DailyListWorkflow() {
    	super();
    }
    
    public DailyListWorkflow(DailyList dailyList, Workflow workflow, short workflowType, short status) {
    	super();
    	this.dailyList = dailyList;
    	this.workflow = workflow;
    	this.workflowType = workflowType;
    	this.status = status;
    }
    
    @OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="dailyListWorkflow")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
    public List<DailyListActivity> getDailyListActivities() {
		return dailyListActivities;
	}

	public void setDailyListActivities(List<DailyListActivity> dailyListActivities) {
		this.dailyListActivities = dailyListActivities;
	}
    
    @ManyToOne
    @JoinColumn(name="dailylist_id", nullable=false)
    public DailyList getDailyList() {
		return dailyList;
	}

	public void setDailyList(DailyList dailyList) {
		this.dailyList = dailyList;
	}

	@ManyToOne
    @JoinColumn(name="workflow_id", nullable=false)
	public Workflow getWorkflow() {
		return workflow;
	}

	public void setWorkflow(Workflow workflow) {
		this.workflow = workflow;
	}

	/*@JsonProperty(value = "EventID")
    @Column(name="EventID", nullable=false)
    @Field*/
	@Transient
    public Long getDailyListId(){
        return this.dailyListId;
    }
    
    public void setDailyListId(Long dailyListId){
        this.dailyListId = dailyListId;
    }
    
    /*@JsonProperty(value = "WorkflowID")
    @Column(name="WorkflowID", nullable=false, length=50)
    @Field*/
    @Transient
    public Long getWorkflowId(){
        return this.workflowId;
    }
    
    public void setWorkflowId(Long workflowId){
        this.workflowId = workflowId;
    }
    
    @JsonProperty(value = "WorkflowType")
    @Column(name="workflow_type", nullable=false)
    @Field
    public short getWorkflowType(){
        return this.workflowType;
    }
    
    public void setWorkflowType(short workflowType){
        this.workflowType = workflowType;
    }
    
    @JsonProperty(value = "Status")
    @Column(name="Status", nullable=false)
    @Field
    public short getStatus(){
        return this.status;
    }
    
    public void setStatus(short status){
        this.status = status;
    }
    
    @JsonIgnore
	@Transient
    public String getApprovalOpinion(){
    	String approvalOpinion = "";
    	if (!this.dailyListActivities.isEmpty()) {
    		for (DailyListActivity dailyListActivitie : dailyListActivities) {
	    		if (StringUtils.isBlank(approvalOpinion)){
	    			approvalOpinion = dailyListActivitie.getRemark();
	    		}else{
	    			approvalOpinion = "\n";
	    			approvalOpinion += dailyListActivitie.getRemark();
	    		}
    		}
    	}
        
    	return approvalOpinion;
    }
    
   
    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DailyListWorkflow pojo = (DailyListWorkflow)o;
        return (new EqualsBuilder()
             .append(dailyListId, pojo.dailyListId)
             .append(workflowId, pojo.workflowId)
             .append(workflowType, pojo.workflowType)
             .append(status, pojo.status)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(dailyListId)
             .append(workflowId)
             .append(workflowType)
             .append(status)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("id").append("='").append(getId()).append("', ");
        sb.append("dailylistObjectId").append("='").append(getDailyListId()).append("', ");
        sb.append("workflowId").append("='").append(getWorkflowId()).append("', ");
        sb.append("workflowType").append("='").append(getWorkflowType()).append("', ");
        sb.append("status").append("='").append(getStatus()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}