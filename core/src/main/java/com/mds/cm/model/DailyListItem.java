/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.cm.model;

import com.mds.common.model.DataEntity;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.common.model.IdEntity;
import com.mds.common.model.JsonDateSerializer;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="cm_dailylist_item")
@Indexed
@XmlRootElement
public class DailyListItem extends IdEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -8069085927397057613L;
	private int itemIndex;
    private String layout;
    
    private DailyList dailyList;
    private List<DailyListZone> dailyListZones = Lists.newArrayList();
     
    @ManyToOne
    @JoinColumn(name="dailylist_id", nullable=false)
    public DailyList getDailyList() {
		return dailyList;
	}

	public void setDailyList(DailyList dailyList) {
		this.dailyList = dailyList;
	}
    
	
	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.EAGER, orphanRemoval = true, mappedBy="dailyListItem")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
    public List<DailyListZone> getDailyListZones() {
		return dailyListZones;
	}

	public void setDailyListZones(List<DailyListZone> dailyListZones) {
		this.dailyListZones = dailyListZones;
	}

	@JsonProperty(value = "itemIndex")
    @Column(name="item_index", nullable=false)
    @Field
    public int getIndex(){
        return this.itemIndex;
    }
    
    public void setIndex(int itemIndex){
        this.itemIndex = itemIndex;
    }
    
    @JsonProperty(value = "layout")
    @Column(name="layout", nullable=false, length=50)
    @Field
    public String getLayout(){
        return this.layout;
    }
    
    public void setLayout(String layout){
        this.layout = layout;
    }
    


    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        DailyListItem pojo = (DailyListItem)o;
        return (new EqualsBuilder()
             .append(itemIndex, pojo.itemIndex)
             .append(layout, pojo.layout)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(itemIndex)
             .append(layout)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("uiID").append("='").append(getId()).append("', ");
        sb.append("itemIndex").append("='").append(getIndex()).append("', ");
        sb.append("layout").append("='").append(getLayout()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}