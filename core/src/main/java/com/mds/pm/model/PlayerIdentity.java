/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.pm.model;

import com.mds.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.mds.common.model.JsonDateSerializer;

import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.Lob;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="pm_playeridentity", uniqueConstraints = @UniqueConstraint(columnNames={"guidPlayer"}))
@Indexed
@XmlRootElement
public class PlayerIdentity extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 4567119222371349958L;
	private String guidPlayer;
    private String strUniqueName;
    private Byte[] strIdentity;
    private byte nStatus;
    private Date dtLastUpdate;
    private String strPlayerName;
    private String strLocation;
     
    @JsonProperty(value = "guidPlayer")
    @Column(name="guidPlayer", nullable=false, length=40)
    @Field
    public String getGuidPlayer(){
        return this.guidPlayer;
    }
    
    public void setGuidPlayer(String guidPlayer){
        this.guidPlayer = guidPlayer;
    }
    
    @JsonProperty(value = "strUniqueName")
    @Column(name="strUniqueName", nullable=false, length=50)
    @Field
    public String getUniqueName(){
        return this.strUniqueName;
    }
    
    public void setUniqueName(String strUniqueName){
        this.strUniqueName = strUniqueName;
    }
    
    /*@JsonProperty(value = "strIdentity")
    @Lob
    @Basic(fetch = FetchType.LAZY )
    @Column(name="strIdentity", columnDefinition = "BLOB")
    @Type(type="org.hibernate.type.WrappedMaterializedBlobType")*/
    @Basic(fetch = FetchType.LAZY )
    @Column(name="strIdentity", length = 4194304)
	@JsonIgnore
    public Byte[] getIdentity(){
        return this.strIdentity;
    }
    
    public void setIdentity(Byte[] strIdentity){
        this.strIdentity = strIdentity;
    }
    
    @JsonProperty(value = "nStatus")
    @Column(name="nStatus", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getStatus(){
        return this.nStatus;
    }
    
    public void setStatus(byte nStatus){
        this.nStatus = nStatus;
    }
    
    @JsonProperty(value = "dtLastUpdate")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtLastUpdate", nullable=false, length=19)
    @Field
    public Date getLastUpdate(){
        return this.dtLastUpdate;
    }
    
    public void setLastUpdate(Date dtLastUpdate){
        this.dtLastUpdate = dtLastUpdate;
    }
    
    @JsonProperty(value = "strPlayerName")
    @Column(name="strPlayerName", nullable=false, length=50)
    @Field
    public String getPlayerName(){
        return this.strPlayerName;
    }
    
    public void setPlayerName(String strPlayerName){
        this.strPlayerName = strPlayerName;
    }
    
    @JsonProperty(value = "strLocation")
    @Column(name="strLocation", nullable=false, length=255)
    @Field
    public String getLocation(){
        return this.strLocation;
    }
    
    public void setLocation(String strLocation){
        this.strLocation = strLocation;
    }
    


    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PlayerIdentity pojo = (PlayerIdentity)o;
        return (new EqualsBuilder()
             .append(guidPlayer, pojo.guidPlayer)
             .append(strUniqueName, pojo.strUniqueName)
             .append(strIdentity, pojo.strIdentity)
             .append(nStatus, pojo.nStatus)
             .append(dtLastUpdate, pojo.dtLastUpdate)
             .append(strPlayerName, pojo.strPlayerName)
             .append(strLocation, pojo.strLocation)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(guidPlayer)
             .append(strUniqueName)
             .append(strIdentity)
             .append(nStatus)
             .append(dtLastUpdate)
             .append(strPlayerName)
             .append(strLocation)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("uiID").append("='").append(getId()).append("', ");
        sb.append("guidPlayer").append("='").append(getGuidPlayer()).append("', ");
        sb.append("strUniqueName").append("='").append(getUniqueName()).append("', ");
        sb.append("strIdentity").append("='").append(getIdentity()).append("', ");
        sb.append("nStatus").append("='").append(getStatus()).append("', ");
        sb.append("dtLastUpdate").append("='").append(getLastUpdate()).append("', ");
        sb.append("strPlayerName").append("='").append(getPlayerName()).append("', ");
        sb.append("strLocation").append("='").append(getLocation()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}