/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.pm.model;

import com.mds.common.model.DataEntity;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.common.model.JsonDateSerializer;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="pm_playertaskscheduler", uniqueConstraints = @UniqueConstraint(columnNames={"strSchedule"}))
@Indexed
@XmlRootElement
public class PlayerTaskScheduler extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -9178313662979546453L;
	private String strSchedule;
    private String strDesc;
    private Date dtAction;
    private short nType;
    private short nAction;
    private Date dtStartTime;
    private Date dtEndTime;
    private Date dtLastRun;
    
    private List<Player> players = Lists.newArrayList(); // players
        
    @JsonProperty(value = "strSchedule")
    @Column(name="strSchedule", nullable=false, length=50)
    @Field
    public String getSchedule(){
        return this.strSchedule;
    }
    
    public void setSchedule(String strSchedule){
        this.strSchedule = strSchedule;
    }
    
    @JsonProperty(value = "strDesc")
    @Column(name="strDesc", length=100)
    @Field
    public String getDesc(){
        return this.strDesc;
    }
    
    public void setDesc(String strDesc){
        this.strDesc = strDesc;
    }
    
    @JsonProperty(value = "dtAction")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtAction", nullable=false, length=19)
    @Field
    public Date getAction(){
        return this.dtAction;
    }
    
    public void setAction(Date dtAction){
        this.dtAction = dtAction;
    }
    
    @JsonProperty(value = "nType")
    @Column(name="nType", nullable=false)
    @Field
    public short getType(){
        return this.nType;
    }
    
    public void setType(short nType){
        this.nType = nType;
    }
    
    @JsonProperty(value = "nAction")
    @Column(name="nAction", nullable=false)
    @Field
    public short getActionShort(){
        return this.nAction;
    }
    
    public void setActionShort(short nAction){
        this.nAction = nAction;
    }
    
    @JsonProperty(value = "dtStartTime")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtStartTime", nullable=false, length=19)
    @Field
    public Date getStartTime(){
        return this.dtStartTime;
    }
    
    public void setStartTime(Date dtStartTime){
        this.dtStartTime = dtStartTime;
    }
    
    @JsonProperty(value = "dtEndTime")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtEndTime", nullable=false, length=19)
    @Field
    public Date getEndTime(){
        return this.dtEndTime;
    }
    
    public void setEndTime(Date dtEndTime){
        this.dtEndTime = dtEndTime;
    }
    
    @JsonProperty(value = "dtLastRun")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtLastRun", nullable=false, length=19)
    @Field
    public Date getLastRun(){
        return this.dtLastRun;
    }
    
    public void setLastRun(Date dtLastRun){
        this.dtLastRun = dtLastRun;
    }
    
    @ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(
			name = "pm_playertaskscheduler_player", 
			joinColumns = { @JoinColumn(name = "playertaskscheduler_id") }, 
			inverseJoinColumns = { @JoinColumn(name = "player_id") })
	@OrderBy("id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public List<Player> getPlayers() {
		return players;
	}

	public void setPlayers(List<Player> players) {
		this.players = players;
	}
    
    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PlayerTaskScheduler pojo = (PlayerTaskScheduler)o;
        return (new EqualsBuilder()
             .append(strSchedule, pojo.strSchedule)
             .append(strDesc, pojo.strDesc)
             .append(dtAction, pojo.dtAction)
             .append(nType, pojo.nType)
             .append(nAction, pojo.nAction)
             .append(dtStartTime, pojo.dtStartTime)
             .append(dtEndTime, pojo.dtEndTime)
             .append(dtLastRun, pojo.dtLastRun)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(strSchedule)
             .append(strDesc)
             .append(dtAction)
             .append(nType)
             .append(nAction)
             .append(dtStartTime)
             .append(dtEndTime)
             .append(dtLastRun)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("uiID").append("='").append(getId()).append("', ");
        sb.append("strSchedule").append("='").append(getSchedule()).append("', ");
        sb.append("strDesc").append("='").append(getDesc()).append("', ");
        sb.append("dtAction").append("='").append(getAction()).append("', ");
        sb.append("nType").append("='").append(getType()).append("', ");
        sb.append("nAction").append("='").append(getActionShort()).append("', ");
        sb.append("dtStartTime").append("='").append(getStartTime()).append("', ");
        sb.append("dtEndTime").append("='").append(getEndTime()).append("', ");
        sb.append("dtLastRun").append("='").append(getLastRun()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}