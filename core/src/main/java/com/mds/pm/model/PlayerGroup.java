/**
 * Copyright (c) 2016-2017 
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.pm.model;

import com.mds.common.model.DataEntity;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.common.model.JsonDateSerializer;
import com.mds.common.model.TreeEntity;
import com.mds.sys.model.MenuFunction;
import com.mds.sys.model.Organization;
import com.mds.common.utils.excel.annotation.ExcelField;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="pm_playergroup", uniqueConstraints = @UniqueConstraint(columnNames={"organization_id", "parent_id", "code"}))
@Indexed
@XmlRootElement
public class PlayerGroup extends TreeEntity<PlayerGroup> implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = -2240376105874884512L;
	//private String strCode;
    private String description;
    //private String strParent;
    private Organization organization;	// organization
    
    //private List<PlayerGroup> children = Lists.newArrayList();// child player groups
    private List<PlayerMapping> playerMappings = Lists.newArrayList(); // player mappings
    
    public PlayerGroup(){
		super();
		//this.sort = 30;
	}
	
	public PlayerGroup(final String code){
		this();
		this.code = code;
	}
	
	public PlayerGroup(final long id){
		this();
		this.id = id;
	}
	
	public PlayerGroup(PlayerGroup parent){
		this();
		this.parent = parent;
	}
    
    @ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name="parent_id", nullable=true)
	@NotFound(action = NotFoundAction.IGNORE)
    @ExcelField(title="playerGroup.parent", complex=1, align=1, sort=20, fieldType=PlayerGroup.class)
    @JsonBackReference
    @Override
	public PlayerGroup getParent() {
		return parent;
	}

    @Override
	public void setParent(PlayerGroup parent) {
		this.parent = parent;
	}
     
    @JsonProperty(value = "Code")
    @Column(name="code", nullable=false, length=100)
    @ExcelField(title="playerGroup.code", align=1, sort=30)
    @Field
    @Override
    public String getCode(){
        return this.code;
    }
    
    @Override
    public void setCode(String code){
        this.code = code;
    }
    
    @JsonProperty(value = "Name")
	@ExcelField(title="playerGroup.name", align=1, sort=40)
	@Column(length=256)
	@Field
	@Override
	public String getName() {
		return name;
	}

    @Override
	public void setName(String name) {
		this.name = name;
	}
        
    @JsonProperty(value = "Description")
    @Column(name="description", nullable=true, length=1024)
    @ExcelField(title="playerGroup.description", align=1, sort=50)
    @Field
    public String getDescription(){
        return this.description;
    }
    
    public void setDescription(String description){
        this.description = description;
    }
    
    @OneToMany(cascade=CascadeType.ALL, mappedBy = "parent", fetch=FetchType.LAZY)
	@OrderBy(value="code") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
    @JsonManagedReference
    @Override
	public List<PlayerGroup> getChildren() {
		return children;
	}

    @Override
	public void setChildren(List<PlayerGroup> children) {
		this.children = children;
	}

	/**
	 * @return the playerMappings
	 */
	@OneToMany(cascade=CascadeType.ALL, fetch = FetchType.LAZY, orphanRemoval = true, mappedBy="playerGroup")
	@OrderBy(value="id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<PlayerMapping> getPlayerMappings() {
		return playerMappings;
	}

	/**
	 * @param playerMappings the playerMappings to set
	 */
	public void setPlayerMappings(List<PlayerMapping> playerMappings) {
		this.playerMappings = playerMappings;
	}
	
    @ManyToOne(optional=true, fetch = FetchType.LAZY)
   	@JoinColumn(name="organization_id", nullable=true)
   	@NotFound(action = NotFoundAction.IGNORE)
   	@JsonIgnore
   	public Organization getOrganization() {
   		return organization;
   	}

   	public void setOrganization(Organization organization) {
   		this.organization = organization;
   	}

	/**
    * {@inheritDoc}
    */
	@Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PlayerGroup pojo = (PlayerGroup)o;
        return (new EqualsBuilder()
             .append(code, pojo.code)
             .append(name, pojo.name)
             .append(description, pojo.description)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
	@Override
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(code)
             .append(name)
             .append(description)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
	@Override
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("id").append("='").append(getId()).append("', ");
        sb.append("strCode").append("='").append(getCode()).append("', ");
        sb.append("strName").append("='").append(getName()).append("', ");
        sb.append("strDesc").append("='").append(getDescription()).append("', ");
        sb.append("strParent").append("='").append(getParent()==null ? "" : getParent().getCode()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}