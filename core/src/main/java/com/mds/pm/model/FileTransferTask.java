/**
 * Copyright (c) 2016-2017 https://github.com/chinamds
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 */
// Created using LayerGen 4.0

package com.mds.pm.model;

import com.mds.common.model.DataEntity;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.google.common.collect.Lists;
import com.mds.common.model.JsonDateSerializer;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Type;
import org.hibernate.search.annotations.DocumentId;
import org.hibernate.search.annotations.Field;
import org.hibernate.search.annotations.FieldBridge;
import org.hibernate.search.annotations.Indexed;
import org.hibernate.search.annotations.IndexedEmbedded;
import org.hibernate.search.bridge.builtin.IntegerBridge;
import  org.apache.commons.lang.builder.HashCodeBuilder;
import  org.apache.commons.lang.builder.EqualsBuilder;

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.CascadeType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;

import javax.xml.bind.annotation.XmlRootElement;

import java.io.Serializable;
import java.math.BigDecimal;

@Entity
@Table(name="pm_filetransfertask", uniqueConstraints = @UniqueConstraint(columnNames={"strTask"}))
@Indexed
@XmlRootElement
public class FileTransferTask extends DataEntity implements Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = -1858420164081461287L;
	private String strTask;
    private String strFtpTime;
    private String strFtpContent;
    private short nAction;
    private byte bIncludeToday;
    private byte bImm;
    private byte bAllContent;
    private int dwFtpContent;
    private int nPeriod;
    private Date dtValidity;
    private Long nMaximumLimit;
    private short nVia;
    private short nRetries;
    private String strTimeOuts;
    private Date dtSend;
    
    private List<Player> players = Lists.newArrayList(); // players
     
    @JsonProperty(value = "strTask")
    @Column(name="strTask", nullable=false, length=50)
    @Field
    public String getTask(){
        return this.strTask;
    }
    
    public void setTask(String strTask){
        this.strTask = strTask;
    }
    
    @JsonProperty(value = "strFtpTime")
    @Column(name="strFtpTime", nullable=false, length=19)
    @Field
    public String getFtpTime(){
        return this.strFtpTime;
    }
    
    public void setFtpTime(String strFtpTime){
        this.strFtpTime = strFtpTime;
    }
    
    @JsonProperty(value = "strFtpContent")
    @Column(name="strFtpContent", length=50)
    @Field
    public String getFtpContent(){
        return this.strFtpContent;
    }
    
    public void setFtpContent(String strFtpContent){
        this.strFtpContent = strFtpContent;
    }
    
    @JsonProperty(value = "nAction")
    @Column(name="nAction", nullable=false)
    @Field
    public short getAction(){
        return this.nAction;
    }
    
    public void setAction(short nAction){
        this.nAction = nAction;
    }
    
    @JsonProperty(value = "bIncludeToday")
    @Column(name="bIncludeToday", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBIncludeToday(){
        return this.bIncludeToday;
    }
    
    public void setBIncludeToday(byte bIncludeToday){
        this.bIncludeToday = bIncludeToday;
    }
    
    @JsonProperty(value = "bImm")
    @Column(name="bImm", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBImm(){
        return this.bImm;
    }
    
    public void setBImm(byte bImm){
        this.bImm = bImm;
    }
    
    @JsonProperty(value = "bAllContent")
    @Column(name="bAllContent", nullable=false)
    @Type(type="org.hibernate.type.ByteType")
    @FieldBridge(impl = IntegerBridge.class)
    @Field
    public byte getBAllContent(){
        return this.bAllContent;
    }
    
    public void setBAllContent(byte bAllContent){
        this.bAllContent = bAllContent;
    }
    
    @JsonProperty(value = "dwFtpContent")
    @Column(name="dwFtpContent", nullable=false)
    @Field
    public int getFtpContentInt(){
        return this.dwFtpContent;
    }
    
    public void setFtpContentInt(int dwFtpContent){
        this.dwFtpContent = dwFtpContent;
    }
    
    @JsonProperty(value = "nPeriod")
    @Column(name="nPeriod", nullable=false)
    @Field
    public int getPeriod(){
        return this.nPeriod;
    }
    
    public void setPeriod(int nPeriod){
        this.nPeriod = nPeriod;
    }
    
    @JsonProperty(value = "dtValidity")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtValidity", length=19)
    @Field
    public Date getValidity(){
        return this.dtValidity;
    }
    
    public void setValidity(Date dtValidity){
        this.dtValidity = dtValidity;
    }
    
    @JsonProperty(value = "nMaximumLimit")
    @Column(name="nMaximumLimit")
    @Field
    public Long getMaximumLimit(){
        return this.nMaximumLimit;
    }
    
    public void setMaximumLimit(Long nMaximumLimit){
        this.nMaximumLimit = nMaximumLimit;
    }  
    
    @JsonProperty(value = "nVia")
    @Column(name="nVia", nullable=false)
    @Field
    public short getVia(){
        return this.nVia;
    }
    
    public void setVia(short nVia){
        this.nVia = nVia;
    }
    
    @JsonProperty(value = "nRetries")
    @Column(name="nRetries", nullable=false)
    @Field
    public short getRetries(){
        return this.nRetries;
    }
    
    public void setRetries(short nRetries){
        this.nRetries = nRetries;
    }
    
    @JsonProperty(value = "strTimeOuts")
    @Column(name="strTimeOuts", nullable=false, length=5)
    @Field
    public String getTimeOuts(){
        return this.strTimeOuts;
    }
    
    public void setTimeOuts(String strTimeOuts){
        this.strTimeOuts = strTimeOuts;
    }
    
    @JsonProperty(value = "dtSend")
    @JsonSerialize(using = JsonDateSerializer.class)
    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="dtSend", nullable=false, length=19)
    @Field
    public Date getSend(){
        return this.dtSend;
    }
    
    public void setSend(Date dtSend){
        this.dtSend = dtSend;
    }
    
    @ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(
			name = " pm_filetransfertask_player", 
			joinColumns = { @JoinColumn(name = "filetransfertask_id") }, 
			inverseJoinColumns = { @JoinColumn(name = "player_id") })
	@OrderBy("id") 
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	
	public List<Player> getPlayers() {
		return players;
	}

	public void setPlayers(List<Player> players) {
		this.players = players;
	}
    


    /**
    * {@inheritDoc}
    */
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        FileTransferTask pojo = (FileTransferTask)o;
        return (new EqualsBuilder()
             .append(strTask, pojo.strTask)
             .append(strFtpTime, pojo.strFtpTime)
             .append(strFtpContent, pojo.strFtpContent)
             .append(nAction, pojo.nAction)
             .append(bIncludeToday, pojo.bIncludeToday)
             .append(bImm, pojo.bImm)
             .append(bAllContent, pojo.bAllContent)
             .append(dwFtpContent, pojo.dwFtpContent)
             .append(nPeriod, pojo.nPeriod)
             .append(dtValidity, pojo.dtValidity)
             .append(nMaximumLimit, pojo.nMaximumLimit)
             .append(nVia, pojo.nVia)
             .append(nRetries, pojo.nRetries)
             .append(strTimeOuts, pojo.strTimeOuts)
             .append(dtSend, pojo.dtSend)
             ).isEquals();
    }


    /**
    * {@inheritDoc}
    */
     public int hashCode() {
        return   new  HashCodeBuilder( 17 ,  37 )
             .append(strTask)
             .append(strFtpTime)
             .append(strFtpContent)
             .append(nAction)
             .append(bIncludeToday)
             .append(bImm)
             .append(bAllContent)
             .append(dwFtpContent)
             .append(nPeriod)
             .append(dtValidity)
             .append(nMaximumLimit)
             .append(nVia)
             .append(nRetries)
             .append(strTimeOuts)
             .append(dtSend)
             .toHashCode();
    }


    /**
    * {@inheritDoc}
    */
     public String toString() {
        StringBuffer sb = new StringBuffer(getClass().getSimpleName());
        sb.append(" [");
        sb.append("uiID").append("='").append(getId()).append("', ");
        sb.append("strTask").append("='").append(getTask()).append("', ");
        sb.append("strFtpTime").append("='").append(getFtpTime()).append("', ");
        sb.append("strFtpContent").append("='").append(getFtpContent()).append("', ");
        sb.append("nAction").append("='").append(getAction()).append("', ");
        sb.append("bIncludeToday").append("='").append(getBIncludeToday()).append("', ");
        sb.append("bImm").append("='").append(getBImm()).append("', ");
        sb.append("bAllContent").append("='").append(getBAllContent()).append("', ");
        sb.append("dwFtpContent").append("='").append(getFtpContentInt()).append("', ");
        sb.append("nPeriod").append("='").append(getPeriod()).append("', ");
        sb.append("dtValidity").append("='").append(getValidity()).append("', ");
        sb.append("nMaximumLimit").append("='").append(getMaximumLimit()).append("', ");
        sb.append("nVia").append("='").append(getVia()).append("', ");
        sb.append("nRetries").append("='").append(getRetries()).append("', ");
        sb.append("strTimeOuts").append("='").append(getTimeOuts()).append("', ");
        sb.append("dtSend").append("='").append(getSend()).append("', ");
        sb.append("]");
        
        return sb.toString();
    }

}